(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{370:function(a,t,e){"use strict";e.r(t);var i=e(42),s=Object(i.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("blockquote",[e("p",[a._v("缓存可以说是性能优化中简单高效的一种优化方式了。一个优秀的缓存策略可以\n缩短网页请求资源的距离，\n减少网络延迟(缓存的使用可以明显加快页面打开速度，达到更好的用户体验)，\n并且由于缓存文件可以重复利用，还可以减少带宽，降低网络负荷,降低服务器压力。\n对于一个数据请求来说，可以分为发起网络请求、后端处理、浏览器响应三个步骤。浏览器缓存可以帮助我们在第一和第三步骤中优化性能。比如说直接使用缓存而不发起请求，或者发起了请求但后端存储的数据和前端一致，那么就没有必要再将数据回传回来，这样就减少了响应数据。")])]),a._v(" "),e("h2",{attrs:{id:"缓存位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存位置"}},[a._v("#")]),a._v(" 缓存位置:")]),a._v(" "),e("p",[a._v("从缓存位置上来说分为四种，并且各自有优先级，当依次查找缓存且都没有命中的时候，才会去请求网络。\nService Worker\nMemory Cache\nDisk Cache\nPush Cache")]),a._v(" "),e("h2",{attrs:{id:"缓存过程分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存过程分析"}},[a._v("#")]),a._v(" 缓存过程分析:")]),a._v(" "),e("p",[a._v("浏览器与服务器通信的方式为应答模式，即是：浏览器发起HTTP请求 – 服务器响应该请求，那么浏览器怎么确定一个资源该不该缓存，如何去缓存呢？浏览器第一次向服务器发起该请求后拿到请求结果后，将请求结果和缓存标识存入浏览器缓存，浏览器对于缓存的处理是根据第一次请求资源时返回的响应头来确定的\n"),e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/3174701-de3d6e025582103a?imageMogr2/auto-orient/strip%7CimageView2/2/w/670/format/webp",alt:"avatar"}}),a._v("\n由上图我们可以知道：\n浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识\n浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中\n以上两点结论就是浏览器缓存机制的关键，它确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了")]),a._v(" "),e("h2",{attrs:{id:"缓存策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存策略"}},[a._v("#")]),a._v(" 缓存策略:")]),a._v(" "),e("p",[a._v("根据是否需要向服务器重新发起HTTP请求将缓存过程分为两个部分，分别是强缓存和协商缓存。")]),a._v(" "),e("h3",{attrs:{id:"强缓存：不会向服务器发送请求，直接从缓存中读取资源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强缓存：不会向服务器发送请求，直接从缓存中读取资源"}},[a._v("#")]),a._v(" 强缓存：不会向服务器发送请求，直接从缓存中读取资源")]),a._v(" "),e("p",[a._v("强缓存可以通过设置两种 HTTP Header 实现：Expires 和 Cache-Control。")]),a._v(" "),e("p",[a._v("Expires:缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点。也就是说，Expires=max-age + 请求时间，需要和Last-modified结合使用。Expires是Web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。")]),a._v(" "),e("p",[a._v("Cache-Control:在HTTP/1.1中，Cache-Control是最重要的规则，主要用于控制网页缓存。比如当Cache-Control:max-age=300时，则代表在这个请求正确返回时间（浏览器也会记录下来）的5分钟内再次加载资源，就会命中强缓存。")]),a._v(" "),e("p",[a._v("Expires和Cache-Control两者对比:\nExpires 是http1.0的产物，Cache-Control是http1.1的产物，\n两者同时存在的话，Cache-Control优先级高于Expires；\n在某些不支持HTTP1.1的环境下，Expires就会发挥用处。所以Expires其实是过时的产物，现阶段它的存在只是一种兼容性的写法。")]),a._v(" "),e("h3",{attrs:{id:"强缓存的缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强缓存的缺点"}},[a._v("#")]),a._v(" 强缓存的缺点:")]),a._v(" "),e("p",[a._v("强缓存判断是否缓存的依据来自于是否超出某个时间或者某个时间段，而不关心服务器端文件是否已经更新，这可能会导致加载文件不是服务器端最新的内容")]),a._v(" "),e("h2",{attrs:{id:"协商缓存：协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存：协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程"}},[a._v("#")]),a._v(" 协商缓存：协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程")]),a._v(" "),e("p",[a._v("有以下两种情况：\n协商缓存生效，返回304和Not Modified\n"),e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/3174701-660fd163329d080b?imageMogr2/auto-orient/strip%7CimageView2/2/w/709/format/webp",alt:"avatar"}})]),a._v(" "),e("p",[a._v("协商缓存失效，返回200和请求结果\n"),e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/3174701-24953079cfebf2bf?imageMogr2/auto-orient/strip%7CimageView2/2/w/666/format/webp",alt:"avatar"}})]),a._v(" "),e("p",[a._v("协商缓存可以通过设置两种 HTTP Header 实现：Last-Modified 和 ETag 。\n1.Last-Modified和If-Modified-Since:\n浏览器在第一次访问资源时，服务器返回资源的同时，在response header中添加 Last-Modified的header，值是这个资源在服务器上的最后修改时间，浏览器接收后缓存文件和header；\n浏览器下一次请求这个资源，浏览器检测到有 Last-Modified这个header，于是添加If-Modified-Since这个header，值就是Last-Modified中的值；服务器再次收到这个资源请求，会根据 If-Modified-Since 中的值与服务器中这个资源的最后修改时间对比，如果没有变化，返回304和空的响应体，直接从缓存读取，如果If-Modified-Since的时间小于服务器中这个资源的最后修改时间，说明文件有更新，于是返回新的资源文件和200\n但是 Last-Modified 存在一些弊端：\n如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 Last-Modified 被修改，服务端不能命中缓存导致发送相同的资源\n因为 Last-Modified 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源\n既然根据文件修改时间来决定是否缓存尚有不足，能否可以直接根据文件内容是否修改来决定缓存策略？所以在 HTTP / 1.1 出现了 ETag 和If-None-Match:\n2.ETag和If-None-Match:\nEtag是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)，只要资源有变化，Etag就会重新生成。浏览器在下一次加载资源向服务器发送请求时，会将上一次返回的Etag值放到request header里的If-None-Match里，服务器只需要比较客户端传来的If-None-Match跟自己服务器上该资源的ETag是否一致，就能很好地判断资源相对客户端而言是否被修改过了。如果服务器发现ETag匹配不上，那么直接以常规GET 200回包形式将新的资源（当然也包括了新的ETag）发给客户端；如果ETag是一致的，则直接返回304知会客户端直接使用本地缓存即可。")]),a._v(" "),e("h3",{attrs:{id:"etag和last-modified的对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#etag和last-modified的对比"}},[a._v("#")]),a._v(" ETag和Last-Modified的对比:")]),a._v(" "),e("p",[a._v("首先在精确度上，Etag要优于Last-Modified。\nLast-Modified的时间单位是秒，如果某个文件在1秒内改变了多次，那么他们的Last-Modified其实并没有体现出来修改，但是Etag每次都会改变确保了精度；如果是负载均衡的服务器，各个服务器生成的Last-Modified也有可能不一致。\n第二在性能上，Etag要逊于Last-Modified，毕竟Last-Modified只需要记录时间，而Etag需要服务器通过算法来计算出一个hash值。\n第三在优先级上，服务器校验优先考虑Etag")]),a._v(" "),e("h2",{attrs:{id:"缓存机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存机制"}},[a._v("#")]),a._v(" 缓存机制:")]),a._v(" "),e("p",[a._v("强制缓存优先于协商缓存进行，若强制缓存(Expires和Cache-Control)生效则直接使用缓存，若不生效则进行协商缓存(Last-Modified / If-Modified-Since和Etag / If-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，返回200，重新返回资源和缓存标识，再存入浏览器缓存中；生效则返回304，继续使用缓存。具体流程图如下\n"),e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/3174701-9d9e8b52a18ed35a?imageMogr2/auto-orient/strip%7CimageView2/2/w/519/format/webp",alt:"avatar"}})]),a._v(" "),e("p",[a._v("看到这里，不知道你是否存在这样一个疑问:如果什么缓存策略都没设置，那么浏览器会怎么处理？\n对于这种情况，浏览器会采用一个启发式的算法，通常会取响应头中的 Date 减去 Last-Modified 值的 10% 作为缓存时间。")])])}),[],!1,null,null,null);t.default=s.exports}}]);